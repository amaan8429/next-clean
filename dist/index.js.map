{"version":3,"sources":["../src/index.ts","../src/functions.ts","../src/handles.ts","../src/samples/page.ts","../src/samples/layout.ts","../src/samples/globalscss.ts"],"sourcesContent":["#! /usr/bin/env node\n\nimport path from \"path\";\nimport { fileExists } from \"./functions\";\nimport {\n  handlePublicFolder,\n  handleReadmeFile,\n  handleFavicon,\n  handleLayoutFile,\n  handlePageFile,\n  handleGlobalsFile,\n} from \"./handles\";\n\nconst currentDir: string = process.cwd();\n\nasync function main() {\n  const publicPath: string = path.join(currentDir, \"public\");\n  const readmePath: string = path.join(currentDir, \"README.md\");\n\n  await handlePublicFolder(publicPath);\n  await handleReadmeFile(readmePath);\n\n  const srcPath: string = path.join(currentDir, \"src\");\n  if (await fileExists(srcPath)) {\n    const appPath: string = path.join(srcPath, \"app\");\n    if (await fileExists(appPath)) {\n      console.log(\"You are using app directory, smart choice!\");\n      await handleFavicon(appPath);\n      await handleLayoutFile(appPath);\n      await handlePageFile(appPath);\n      await handleGlobalsFile(appPath);\n    }\n  } else if (await fileExists(currentDir)) {\n    const appPath: string = path.join(currentDir, \"app\");\n    if (await fileExists(appPath)) {\n      console.log(\"You are using app directory, smart choice!\");\n      await handleFavicon(appPath);\n      await handleLayoutFile(appPath);\n      await handlePageFile(appPath);\n    } else {\n      console.log(\"app folder does not exist , please check again\");\n    }\n  } else {\n    console.log(\n      \"no src folder found. Please run the command in the root of your next.js project.\"\n    );\n  }\n}\n\nmain();\n","//functions.ts\nimport fs from \"fs\";\nimport path from \"path\";\n\n/**\n * Checks if a file exists at the given file path.\n * @param filePath - The path to the file.\n * @returns A Promise that resolves to a boolean indicating whether the file exists or not.\n */\nexport async function fileExists(filePath: string): Promise<boolean> {\n  return new Promise((resolve) => {\n    fs.access(filePath, fs.constants.F_OK, (err) => {\n      resolve(!err);\n    });\n  });\n}\n\n/**\n * Deletes all files within the given folder path.\n * @param folderPath - The path to the folder.\n * @returns A Promise that resolves when all files are deleted, or rejects with an error.\n */\nexport async function deleteAllFilesInFolder(\n  folderPath: string\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.readdir(folderPath, (err, files) => {\n      if (err) {\n        reject(err);\n      } else {\n        for (const file of files) {\n          fs.unlink(path.join(folderPath, file), (err) => {\n            if (err) {\n              reject(err);\n            }\n          });\n        }\n        resolve();\n      }\n    });\n  });\n}\n\n/**\n * Updates the content of a file at the given file path.\n * @param filePath - The path to the file.\n * @param content - The new content to be written to the file.\n * @returns A Promise that resolves when the file is updated, or rejects with an error.\n */\nexport async function fileUpdation(\n  filePath: string,\n  content: string\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(filePath, content, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\n/**\n * Deletes a single file at the given file path.\n * @param filePath - The path to the file.\n * @returns A Promise that resolves when the file is deleted, or rejects with an error.\n */\nexport async function singleFileDeletion(filePath: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.unlink(filePath, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n","//handles.ts\nimport path from \"path\";\nimport { pageFileContent } from \"./samples/page\";\nimport { layoutFileContent } from \"./samples/layout\";\nimport { globalscssFileContent } from \"./samples/globalscss\";\nimport {\n  fileExists,\n  deleteAllFilesInFolder,\n  fileUpdation,\n  singleFileDeletion,\n} from \"./functions\";\n\n/**\n * Handles the public folder by deleting all files within it if it exists.\n * @param publicPath - The path to the public folder.\n */\nexport async function handlePublicFolder(publicPath: string) {\n  if (await fileExists(publicPath)) {\n    try {\n      await deleteAllFilesInFolder(publicPath);\n      console.log(\"public folder cleaned successfully\");\n    } catch (err) {\n      console.error(`Error cleaning public folder: ${err}`);\n    }\n  } else {\n    console.log(\"public folder does not exist , please check again\");\n  }\n}\n\n/**\n * Handles the README.md file by emptying its content if it exists.\n * @param readmePath - The path to the README.md file.\n */\nexport async function handleReadmeFile(readmePath: string) {\n  if (await fileExists(readmePath)) {\n    try {\n      await fileUpdation(readmePath, \"\");\n      console.log(\"README.md updated successfully\");\n    } catch (err) {\n      console.error(`Error updating README.md: ${err}`);\n    }\n  } else {\n    console.log(\"README.md does not exist, please check again\");\n  }\n}\n\n/**\n * Handles the favicon.ico file by deleting it if it exists.\n * @param appPath - The path to the app folder.\n */\nexport async function handleFavicon(appPath: string) {\n  const faviconPath: string = path.join(appPath, \"favicon.ico\");\n  const faviconExists: boolean = await fileExists(faviconPath);\n  if (faviconExists) {\n    try {\n      await singleFileDeletion(faviconPath);\n      console.log(\"favicon.ico deleted successfully\");\n    } catch (err) {\n      console.error(`Error deleting favicon.ico: ${err}`);\n    }\n  } else {\n    console.log(\"favicon.ico does not exist\");\n  }\n}\n\n/**\n * Handles the layout.tsx file by updating its content with the provided content.\n * @param appPath - The path to the app folder.\n */\nexport async function handleLayoutFile(appPath: string) {\n  const layoutPath: string = path.join(appPath, \"layout.tsx\");\n  if (await fileExists(layoutPath)) {\n    try {\n      await fileUpdation(layoutPath, layoutFileContent);\n      console.log(\"layout.tsx file updated successfully\");\n    } catch (err) {\n      console.error(`Error updating layout file: ${err}`);\n    }\n  } else {\n    console.log(\"layout.tsx file does not exist\");\n  }\n}\n\n/**\n * Handles the page.tsx file by updating its content with the provided content.\n * @param appPath - The path to the app folder.\n */\nexport async function handlePageFile(appPath: string) {\n  const pagePath: string = path.join(appPath, \"page.tsx\");\n  if (await fileExists(pagePath)) {\n    try {\n      await fileUpdation(pagePath, pageFileContent);\n      console.log(\"page.tsx file updated successfully\");\n    } catch (err) {\n      console.error(`Error updating page.tsx file: ${err}`);\n    }\n  } else {\n    console.log(\"page.tsx does not exist in app folder\");\n  }\n}\n\n/**\n * Handles the globals.css file by updating its content with the provided content.\n * @param appPath - The path to the app folder.\n */\nexport async function handleGlobalsFile(appPath: string) {\n  const globalsPath: string = path.join(appPath, \"globals.css\");\n  if (await fileExists(globalsPath)) {\n    try {\n      await fileUpdation(globalsPath, globalscssFileContent);\n      console.log(\"globals.css file updated successfully\");\n    } catch (err) {\n      console.error(`Error updating globals.css file: ${err}`);\n    }\n  } else {\n    console.log(\"globals.css does not exist\");\n  }\n}\n","export const pageFileContent = `import React from \"react\";\n\nconst page = () => {\n  return <div>hello world</div>;\n};\n\nexport default page;`;\n","export const layoutFileContent = `import type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"\",\n  description: \"\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>{children}</body>\n    </html>\n  );\n}\n`;\n","export const globalscssFileContent = `@tailwind base;\n@tailwind components;\n@tailwind utilities;`;\n"],"mappings":"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","names":["import_path","fs","path","err","import_path","path","path"]}